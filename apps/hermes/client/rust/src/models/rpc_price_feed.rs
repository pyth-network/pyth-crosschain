/*
 * hermes
 *
 * Hermes is an agent that provides Verified Prices from the Pythnet Pyth Oracle.
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RpcPriceFeed {
    #[serde(rename = "ema_price")]
    pub ema_price: Box<models::RpcPrice>,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(
        rename = "metadata",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub metadata: Option<Option<Box<models::RpcPriceFeedMetadata>>>,
    #[serde(rename = "price")]
    pub price: Box<models::RpcPrice>,
    /// The VAA binary represented as a base64 string.
    #[serde(
        rename = "vaa",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub vaa: Option<Option<String>>,
}

impl RpcPriceFeed {
    pub fn new(ema_price: models::RpcPrice, id: String, price: models::RpcPrice) -> RpcPriceFeed {
        RpcPriceFeed {
            ema_price: Box::new(ema_price),
            id,
            metadata: None,
            price: Box::new(price),
            vaa: None,
        }
    }
}
