@use "@pythnetwork/component-library/theme";

.priceComponentDrawer {
  display: grid;
  grid-template-rows: repeat(2, max-content);
  grid-template-columns: 100%;
  gap: theme.spacing(10);

  .stats {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(2, 1fr);
    gap: theme.spacing(4);
  }

  .spinner {
    margin: theme.spacing(40) auto;
    font-size: theme.spacing(16);
  }

  .rankingBreakdown {
    .scoreHistoryChart {
      grid-column: span 2 / span 2;
      border-radius: theme.border-radius("2xl");
      display: flex;
      flex-flow: column nowrap;
      gap: theme.spacing(4);
      background: theme.color("background", "primary");
      margin-bottom: theme.spacing(2);

      .top {
        display: flex;
        flex-flow: row nowrap;
        justify-content: space-between;
        align-items: flex-start;
        margin: theme.spacing(4);

        .left {
          display: flex;
          flex-flow: column nowrap;
          gap: theme.spacing(1);

          .header {
            color: theme.color("heading");

            @include theme.text("sm", "medium");
          }

          .subheader {
            color: theme.color("muted");

            @include theme.text("xs", "normal");
          }
        }
      }

      .chart {
        border-bottom-left-radius: theme.border-radius("2xl");
        border-bottom-right-radius: theme.border-radius("2xl");
        overflow: hidden;

        .score,
        .uptimeScore,
        .deviationScore,
        .stalledScore {
          transition: opacity 100ms linear;
          opacity: 0.2;
        }

        .score {
          color: theme.color("states", "data", "normal");
        }

        .uptimeScore {
          color: theme.color("states", "info", "normal");
        }

        .deviationScore {
          color: theme.color("states", "lime", "normal");
        }

        .stalledScore {
          color: theme.color("states", "warning", "normal");
        }
      }

      &:not([data-focused-score], [data-hovered-score]) {
        .score,
        .uptimeScore,
        .deviationScore,
        .stalledScore {
          opacity: 1;
        }
      }

      &[data-hovered-score="uptime"],
      &[data-focused-score="uptime"] {
        .uptimeScore {
          opacity: 1;
        }
      }

      &[data-hovered-score="deviation"],
      &[data-focused-score="deviation"] {
        .deviationScore {
          opacity: 1;
        }
      }

      &[data-hovered-score="stalled"],
      &[data-focused-score="stalled"] {
        .stalledScore {
          opacity: 1;
        }
      }

      &[data-hovered-score="final"],
      &[data-focused-score="final"] {
        .score {
          opacity: 1;
        }
      }
    }

    .date {
      @include theme.text("sm", "normal");

      margin: theme.spacing(2) theme.spacing(4);
    }

    .scoreCell {
      vertical-align: top;
    }

    .metric {
      display: flex;
      flex-flow: column nowrap;
      gap: theme.spacing(2);
      overflow: hidden;

      .metricName {
        display: flex;
        flex-flow: row nowwrap;
        align-items: center;
        gap: theme.spacing(2);

        .legend {
          width: theme.spacing(4);
          height: theme.spacing(4);
          fill: none;
        }
      }

      .metricDescription {
        color: theme.color("muted");

        @include theme.text("sm", "normal");

        white-space: normal;
        line-height: 1.2;
      }

      &[data-component="uptime"] .legend {
        stroke: theme.color("states", "info", "normal");
      }

      &[data-component="deviation"] .legend {
        stroke: theme.color("states", "lime", "normal");
      }

      &[data-component="stalled"] .legend {
        stroke: theme.color("states", "warning", "normal");
      }

      &[data-component="final"] .legend {
        stroke: theme.color("states", "data", "normal");
      }
    }
  }
}
