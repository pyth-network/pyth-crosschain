// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `publisher_update.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

// @@protoc_insertion_point(message:pyth_lazer_transaction.PublisherUpdate)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PublisherUpdate {
    // message fields
    // @@protoc_insertion_point(field:pyth_lazer_transaction.PublisherUpdate.updates)
    pub updates: ::std::vec::Vec<FeedUpdate>,
    // @@protoc_insertion_point(field:pyth_lazer_transaction.PublisherUpdate.publisher_id)
    pub publisher_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:pyth_lazer_transaction.PublisherUpdate.publisher_timestamp)
    pub publisher_timestamp: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // special fields
    // @@protoc_insertion_point(special_field:pyth_lazer_transaction.PublisherUpdate.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PublisherUpdate {
    fn default() -> &'a PublisherUpdate {
        <PublisherUpdate as ::protobuf::Message>::default_instance()
    }
}

impl PublisherUpdate {
    pub fn new() -> PublisherUpdate {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "updates",
            |m: &PublisherUpdate| { &m.updates },
            |m: &mut PublisherUpdate| { &mut m.updates },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "publisher_id",
            |m: &PublisherUpdate| { &m.publisher_id },
            |m: &mut PublisherUpdate| { &mut m.publisher_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "publisher_timestamp",
            |m: &PublisherUpdate| { &m.publisher_timestamp },
            |m: &mut PublisherUpdate| { &mut m.publisher_timestamp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PublisherUpdate>(
            "PublisherUpdate",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PublisherUpdate {
    const NAME: &'static str = "PublisherUpdate";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.updates.push(is.read_message()?);
                },
                16 => {
                    self.publisher_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.publisher_timestamp)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.updates {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.publisher_id {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.publisher_timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.updates {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.publisher_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.publisher_timestamp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PublisherUpdate {
        PublisherUpdate::new()
    }

    fn clear(&mut self) {
        self.updates.clear();
        self.publisher_id = ::std::option::Option::None;
        self.publisher_timestamp.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PublisherUpdate {
        static instance: PublisherUpdate = PublisherUpdate {
            updates: ::std::vec::Vec::new(),
            publisher_id: ::std::option::Option::None,
            publisher_timestamp: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PublisherUpdate {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PublisherUpdate").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PublisherUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PublisherUpdate {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pyth_lazer_transaction.FeedUpdate)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct FeedUpdate {
    // message fields
    // @@protoc_insertion_point(field:pyth_lazer_transaction.FeedUpdate.feed_id)
    pub feed_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:pyth_lazer_transaction.FeedUpdate.source_timestamp)
    pub source_timestamp: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // message oneof groups
    pub update: ::std::option::Option<feed_update::Update>,
    // special fields
    // @@protoc_insertion_point(special_field:pyth_lazer_transaction.FeedUpdate.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FeedUpdate {
    fn default() -> &'a FeedUpdate {
        <FeedUpdate as ::protobuf::Message>::default_instance()
    }
}

impl FeedUpdate {
    pub fn new() -> FeedUpdate {
        ::std::default::Default::default()
    }

    // .pyth_lazer_transaction.PriceUpdate price_update = 3;

    pub fn price_update(&self) -> &PriceUpdate {
        match self.update {
            ::std::option::Option::Some(feed_update::Update::PriceUpdate(ref v)) => v,
            _ => <PriceUpdate as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_price_update(&mut self) {
        self.update = ::std::option::Option::None;
    }

    pub fn has_price_update(&self) -> bool {
        match self.update {
            ::std::option::Option::Some(feed_update::Update::PriceUpdate(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_price_update(&mut self, v: PriceUpdate) {
        self.update = ::std::option::Option::Some(feed_update::Update::PriceUpdate(v))
    }

    // Mutable pointer to the field.
    pub fn mut_price_update(&mut self) -> &mut PriceUpdate {
        if let ::std::option::Option::Some(feed_update::Update::PriceUpdate(_)) = self.update {
        } else {
            self.update = ::std::option::Option::Some(feed_update::Update::PriceUpdate(PriceUpdate::new()));
        }
        match self.update {
            ::std::option::Option::Some(feed_update::Update::PriceUpdate(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_price_update(&mut self) -> PriceUpdate {
        if self.has_price_update() {
            match self.update.take() {
                ::std::option::Option::Some(feed_update::Update::PriceUpdate(v)) => v,
                _ => panic!(),
            }
        } else {
            PriceUpdate::new()
        }
    }

    // .pyth_lazer_transaction.FundingRateUpdate funding_rate_update = 4;

    pub fn funding_rate_update(&self) -> &FundingRateUpdate {
        match self.update {
            ::std::option::Option::Some(feed_update::Update::FundingRateUpdate(ref v)) => v,
            _ => <FundingRateUpdate as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_funding_rate_update(&mut self) {
        self.update = ::std::option::Option::None;
    }

    pub fn has_funding_rate_update(&self) -> bool {
        match self.update {
            ::std::option::Option::Some(feed_update::Update::FundingRateUpdate(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_funding_rate_update(&mut self, v: FundingRateUpdate) {
        self.update = ::std::option::Option::Some(feed_update::Update::FundingRateUpdate(v))
    }

    // Mutable pointer to the field.
    pub fn mut_funding_rate_update(&mut self) -> &mut FundingRateUpdate {
        if let ::std::option::Option::Some(feed_update::Update::FundingRateUpdate(_)) = self.update {
        } else {
            self.update = ::std::option::Option::Some(feed_update::Update::FundingRateUpdate(FundingRateUpdate::new()));
        }
        match self.update {
            ::std::option::Option::Some(feed_update::Update::FundingRateUpdate(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_funding_rate_update(&mut self) -> FundingRateUpdate {
        if self.has_funding_rate_update() {
            match self.update.take() {
                ::std::option::Option::Some(feed_update::Update::FundingRateUpdate(v)) => v,
                _ => panic!(),
            }
        } else {
            FundingRateUpdate::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "feed_id",
            |m: &FeedUpdate| { &m.feed_id },
            |m: &mut FeedUpdate| { &mut m.feed_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "source_timestamp",
            |m: &FeedUpdate| { &m.source_timestamp },
            |m: &mut FeedUpdate| { &mut m.source_timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, PriceUpdate>(
            "price_update",
            FeedUpdate::has_price_update,
            FeedUpdate::price_update,
            FeedUpdate::mut_price_update,
            FeedUpdate::set_price_update,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, FundingRateUpdate>(
            "funding_rate_update",
            FeedUpdate::has_funding_rate_update,
            FeedUpdate::funding_rate_update,
            FeedUpdate::mut_funding_rate_update,
            FeedUpdate::set_funding_rate_update,
        ));
        oneofs.push(feed_update::Update::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FeedUpdate>(
            "FeedUpdate",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FeedUpdate {
    const NAME: &'static str = "FeedUpdate";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.feed_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.source_timestamp)?;
                },
                26 => {
                    self.update = ::std::option::Option::Some(feed_update::Update::PriceUpdate(is.read_message()?));
                },
                34 => {
                    self.update = ::std::option::Option::Some(feed_update::Update::FundingRateUpdate(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.feed_id {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.source_timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.update {
            match v {
                &feed_update::Update::PriceUpdate(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &feed_update::Update::FundingRateUpdate(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.feed_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.source_timestamp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.update {
            match v {
                &feed_update::Update::PriceUpdate(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &feed_update::Update::FundingRateUpdate(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FeedUpdate {
        FeedUpdate::new()
    }

    fn clear(&mut self) {
        self.feed_id = ::std::option::Option::None;
        self.source_timestamp.clear();
        self.update = ::std::option::Option::None;
        self.update = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FeedUpdate {
        static instance: FeedUpdate = FeedUpdate {
            feed_id: ::std::option::Option::None,
            source_timestamp: ::protobuf::MessageField::none(),
            update: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FeedUpdate {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FeedUpdate").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FeedUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FeedUpdate {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `FeedUpdate`
pub mod feed_update {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:pyth_lazer_transaction.FeedUpdate.update)
    pub enum Update {
        // @@protoc_insertion_point(oneof_field:pyth_lazer_transaction.FeedUpdate.price_update)
        PriceUpdate(super::PriceUpdate),
        // @@protoc_insertion_point(oneof_field:pyth_lazer_transaction.FeedUpdate.funding_rate_update)
        FundingRateUpdate(super::FundingRateUpdate),
    }

    impl ::protobuf::Oneof for Update {
    }

    impl ::protobuf::OneofFull for Update {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::FeedUpdate as ::protobuf::MessageFull>::descriptor().oneof_by_name("update").unwrap()).clone()
        }
    }

    impl Update {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Update>("update")
        }
    }
}

// @@protoc_insertion_point(message:pyth_lazer_transaction.PriceUpdate)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PriceUpdate {
    // message fields
    // @@protoc_insertion_point(field:pyth_lazer_transaction.PriceUpdate.price)
    pub price: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:pyth_lazer_transaction.PriceUpdate.best_bid_price)
    pub best_bid_price: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:pyth_lazer_transaction.PriceUpdate.best_ask_price)
    pub best_ask_price: ::std::option::Option<i64>,
    // special fields
    // @@protoc_insertion_point(special_field:pyth_lazer_transaction.PriceUpdate.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PriceUpdate {
    fn default() -> &'a PriceUpdate {
        <PriceUpdate as ::protobuf::Message>::default_instance()
    }
}

impl PriceUpdate {
    pub fn new() -> PriceUpdate {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "price",
            |m: &PriceUpdate| { &m.price },
            |m: &mut PriceUpdate| { &mut m.price },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "best_bid_price",
            |m: &PriceUpdate| { &m.best_bid_price },
            |m: &mut PriceUpdate| { &mut m.best_bid_price },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "best_ask_price",
            |m: &PriceUpdate| { &m.best_ask_price },
            |m: &mut PriceUpdate| { &mut m.best_ask_price },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PriceUpdate>(
            "PriceUpdate",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PriceUpdate {
    const NAME: &'static str = "PriceUpdate";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.price = ::std::option::Option::Some(is.read_int64()?);
                },
                16 => {
                    self.best_bid_price = ::std::option::Option::Some(is.read_int64()?);
                },
                24 => {
                    self.best_ask_price = ::std::option::Option::Some(is.read_int64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.price {
            my_size += ::protobuf::rt::int64_size(1, v);
        }
        if let Some(v) = self.best_bid_price {
            my_size += ::protobuf::rt::int64_size(2, v);
        }
        if let Some(v) = self.best_ask_price {
            my_size += ::protobuf::rt::int64_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.price {
            os.write_int64(1, v)?;
        }
        if let Some(v) = self.best_bid_price {
            os.write_int64(2, v)?;
        }
        if let Some(v) = self.best_ask_price {
            os.write_int64(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PriceUpdate {
        PriceUpdate::new()
    }

    fn clear(&mut self) {
        self.price = ::std::option::Option::None;
        self.best_bid_price = ::std::option::Option::None;
        self.best_ask_price = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PriceUpdate {
        static instance: PriceUpdate = PriceUpdate {
            price: ::std::option::Option::None,
            best_bid_price: ::std::option::Option::None,
            best_ask_price: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PriceUpdate {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PriceUpdate").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PriceUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PriceUpdate {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pyth_lazer_transaction.FundingRateUpdate)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct FundingRateUpdate {
    // message fields
    // @@protoc_insertion_point(field:pyth_lazer_transaction.FundingRateUpdate.price)
    pub price: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:pyth_lazer_transaction.FundingRateUpdate.rate)
    pub rate: ::std::option::Option<i64>,
    // special fields
    // @@protoc_insertion_point(special_field:pyth_lazer_transaction.FundingRateUpdate.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FundingRateUpdate {
    fn default() -> &'a FundingRateUpdate {
        <FundingRateUpdate as ::protobuf::Message>::default_instance()
    }
}

impl FundingRateUpdate {
    pub fn new() -> FundingRateUpdate {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "price",
            |m: &FundingRateUpdate| { &m.price },
            |m: &mut FundingRateUpdate| { &mut m.price },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "rate",
            |m: &FundingRateUpdate| { &m.rate },
            |m: &mut FundingRateUpdate| { &mut m.rate },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FundingRateUpdate>(
            "FundingRateUpdate",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FundingRateUpdate {
    const NAME: &'static str = "FundingRateUpdate";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.price = ::std::option::Option::Some(is.read_int64()?);
                },
                16 => {
                    self.rate = ::std::option::Option::Some(is.read_int64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.price {
            my_size += ::protobuf::rt::int64_size(1, v);
        }
        if let Some(v) = self.rate {
            my_size += ::protobuf::rt::int64_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.price {
            os.write_int64(1, v)?;
        }
        if let Some(v) = self.rate {
            os.write_int64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FundingRateUpdate {
        FundingRateUpdate::new()
    }

    fn clear(&mut self) {
        self.price = ::std::option::Option::None;
        self.rate = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FundingRateUpdate {
        static instance: FundingRateUpdate = FundingRateUpdate {
            price: ::std::option::Option::None,
            rate: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FundingRateUpdate {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FundingRateUpdate").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FundingRateUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FundingRateUpdate {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16publisher_update.proto\x12\x16pyth_lazer_transaction\x1a\x1fgoogle\
    /protobuf/timestamp.proto\"\xf2\x01\n\x0fPublisherUpdate\x12<\n\x07updat\
    es\x18\x01\x20\x03(\x0b2\".pyth_lazer_transaction.FeedUpdateR\x07updates\
    \x12&\n\x0cpublisher_id\x18\x02\x20\x01(\rH\0R\x0bpublisherId\x88\x01\
    \x01\x12P\n\x13publisher_timestamp\x18\x03\x20\x01(\x0b2\x1a.google.prot\
    obuf.TimestampH\x01R\x12publisherTimestamp\x88\x01\x01B\x0f\n\r_publishe\
    r_idB\x16\n\x14_publisher_timestamp\"\xc8\x02\n\nFeedUpdate\x12\x1c\n\
    \x07feed_id\x18\x01\x20\x01(\rH\0R\x06feedId\x88\x01\x01\x12J\n\x10sourc\
    e_timestamp\x18\x02\x20\x01(\x0b2\x1a.google.protobuf.TimestampH\x01R\
    \x0fsourceTimestamp\x88\x01\x01\x12H\n\x0cprice_update\x18\x03\x20\x01(\
    \x0b2#.pyth_lazer_transaction.PriceUpdateH\x02R\x0bpriceUpdate\x12[\n\
    \x13funding_rate_update\x18\x04\x20\x01(\x0b2).pyth_lazer_transaction.Fu\
    ndingRateUpdateH\x02R\x11fundingRateUpdateB\n\n\x08_feed_idB\x13\n\x11_s\
    ource_timestampB\x08\n\x06update\"\xae\x01\n\x0bPriceUpdate\x12\x19\n\
    \x05price\x18\x01\x20\x01(\x03H\0R\x05price\x88\x01\x01\x12)\n\x0ebest_b\
    id_price\x18\x02\x20\x01(\x03H\x01R\x0cbestBidPrice\x88\x01\x01\x12)\n\
    \x0ebest_ask_price\x18\x03\x20\x01(\x03H\x02R\x0cbestAskPrice\x88\x01\
    \x01B\x08\n\x06_priceB\x11\n\x0f_best_bid_priceB\x11\n\x0f_best_ask_pric\
    e\"Z\n\x11FundingRateUpdate\x12\x19\n\x05price\x18\x01\x20\x01(\x03H\0R\
    \x05price\x88\x01\x01\x12\x17\n\x04rate\x18\x02\x20\x01(\x03H\x01R\x04ra\
    te\x88\x01\x01B\x08\n\x06_priceB\x07\n\x05_rateb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(PublisherUpdate::generated_message_descriptor_data());
            messages.push(FeedUpdate::generated_message_descriptor_data());
            messages.push(PriceUpdate::generated_message_descriptor_data());
            messages.push(FundingRateUpdate::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
