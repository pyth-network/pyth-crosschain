syntax = "proto3";
package pyth_lazer_transaction;

import "publisher_update.proto";
import "governance_instruction.proto";

// if any fields marked as [required] are missing, transaction will be rejected
// if signature does not match payload bytes, transaction will be rejected

// Signed transaction for lazer
// Payload should be created on the publisher side and encoded as bytes.
// Resulting bytes should then be signed with the signature scheme specified.
// The signed lazer transaction is encoded as bytes and sent to Pyth Lazer Relayer.
message SignedLazerTransaction {
    // [required] signature with public key
    optional SignatureWithPublicKey signature_with_public_key = 1;

    // [required] lazer transaction encoded as bytes through protobuf
    optional bytes payload = 2;
}

message SignatureWithPublicKey {
    oneof signing_type {
        Ed25519 ed25519 = 1;
    };
}

message Ed25519 {
    optional bytes signature = 1;
    optional bytes public_key = 2;
}

// Transaction contianing one of the valid Lazer Transactions
message LazerTransaction {
    // [required] valid transaction types supported by pyth lazer
    oneof payload {
        // Expected transaction sent by Publishers
        // May contain many individual updates to various feeds
        PublisherUpdate publisher_update = 1;
        // Sent by governance.
        GovernanceInstruction governance_instruction = 2;
    }
}
