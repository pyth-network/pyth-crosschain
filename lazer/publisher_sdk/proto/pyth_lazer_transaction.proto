syntax = "proto3";

package pyth_lazer_transaction;

import "publisher_update.proto";

// Signed transaction for lazer
// Payload should be created on the publisher side and encoded as bytes.
// Resulting bytes should then be signed with the signature scheme specified.
// The signed lazer transaction is encoded as bytes and sent to Pyth Lazer Relayer.
message SignedLazerTransaction {
    // [required] specifies the type of signature used to sign the payload
    optional TransactionSignatureType signature_type = 1;

    // [required] signature derived from signing payload bytes
    optional bytes signature = 2;

    // [required] lazer transaction encoded as bytes through protobuf
    optional bytes payload = 3;
}

// Types of signatures supported by Pyth Lazer
enum TransactionSignatureType {
    // signature is 64 bytes long
    ed25519 = 0;
}

// Transaction contianing one of the valid Lazer Transactions
message LazerTransaction {
    // [required] valid transaction types supported by pyth lazer
    oneof payload {
      // updates to feeds, sent by authorized publishers
      PublisherUpdate publisher_update = 1;
    }
}
