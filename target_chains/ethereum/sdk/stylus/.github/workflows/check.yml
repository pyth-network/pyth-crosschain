name: check
# This workflow runs whenever a PR is opened or updated, or a commit is pushed
# to main. It runs several checks:
# - fmt: checks that the code is formatted according to `rustfmt`.
# - clippy: checks that the code does not contain any `clippy` warnings.
# - doc: checks that the code can be documented without errors.
# - hack: check combinations of feature flags.
# - typos: checks for typos across the repo.
permissions:
  contents: read
# This configuration allows maintainers of this repo to create a branch and
# pull request based on the new branch. Restricting the push trigger to the
# main branch ensures that the PR only gets built once.
on:
  push:
    branches: [ main ]
  pull_request:
# If new code is pushed to a PR branch, then cancel in progress workflows for
# that PR. Ensures that we don't waste CI time, and returns results quicker.
# https://github.com/jonhoo/rust-ci-conf/pull/5
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
env:
  CARGO_TERM_COLOR: always
jobs:
  fmt:
    runs-on: ubuntu-latest
    name: nightly / fmt
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install stable
        # We run in nightly to make use of some features only available there.
        # Check out `rustfmt.toml` to see which ones.
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt
      - name: cargo fmt --all --check
        run: cargo fmt --all --check
  clippy:
    runs-on: ubuntu-latest
    name: ${{ matrix.toolchain }} / clippy
    permissions:
      contents: read
      checks: write
    strategy:
      fail-fast: false
      matrix:
        # Get early warning of new lints which are regularly introduced in beta
        # channels.
        toolchain: [ stable, beta ]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install ${{ matrix.toolchain }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
          components: clippy
      - name: cargo clippy
        uses: giraffate/clippy-action@v1
        with:
          reporter: 'github-pr-check'
          github_token: ${{ secrets.GITHUB_TOKEN }}
  doc:
    # Run docs generation on nightly rather than stable. This enables features
    # like https://doc.rust-lang.org/beta/unstable-book/language-features/doc-cfg.html
    # which allows an API be documented as only available in some specific
    # platforms.
    runs-on: ubuntu-latest
    name: nightly / doc
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install nightly
        uses: dtolnay/rust-toolchain@nightly
      - name: cargo doc
        run: cargo doc --no-deps --all-features
        env:
          RUSTDOCFLAGS: --cfg docsrs
  hack:
    # `cargo-hack` checks combinations of feature flags to ensure that features
    # are all additive which is required for feature unification.
    runs-on: ubuntu-latest
    name: ubuntu / stable / features
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
        with:
          target: wasm32-unknown-unknown
      - name: cargo install cargo-hack
        uses: taiki-e/install-action@cargo-hack
        # Intentionally no target specifier; see https://github.com/jonhoo/rust-ci-conf/pull/4
        # `--feature-powerset` runs for every combination of features. Note that
        # target in this context means one of `--lib`, `--bin`, etc, and not the
        # target triple.
      - name: cargo hack
        run: cargo hack check --feature-powerset --depth 2 --release --target wasm32-unknown-unknown --skip std --workspace --exclude e2e --exclude basic-example-script --exclude benches
  typos:
    runs-on: ubuntu-latest
    name: ubuntu / stable / typos
    steps:
      - name: Checkout Actions Repository
        uses: actions/checkout@v4
      - name: Check spelling of files in the workspace
        uses: crate-ci/typos@v1.26.0
