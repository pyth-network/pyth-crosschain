#include "imports/stdlib.fc";
#include "common/errors.fc";
#include "common/storage.fc";

;; Opcodes
const int OP_UPDATE_GUARDIAN_SET = 1;
const int OP_EXECUTE_GOVERNANCE_ACTION = 2;

(int, int, int, int) parse_price(slice price_feed) {
    int price = price_feed~load_int(256);
    int conf = price_feed~load_uint(64);
    int expo = price_feed~load_int(32);
    int publish_time = price_feed~load_uint(64);
    return (price, conf, expo, publish_time);
}

(int, int, int, int) price_unsafe(int price_feed_id) method_id {
    (slice result, int success) = latest_price_feeds.udict_get?(256, price_feed_id);
    throw_unless(ERROR_PRICE_FEED_NOT_FOUND, success);
    slice price_feed = result~load_ref().begin_parse();
    slice price = price_feed~load_ref().begin_parse();
    return parse_price(price);
}

(int, int, int, int) price_no_older_than(int time_period, int price_feed_id) method_id {
    (int price, int conf, int expo, int publish_time) = price_unsafe(price_feed_id);
    int current_time = now();
    throw_if(ERROR_OUTDATED_PRICE, current_time - publish_time > time_period);
    return (price, conf, expo, publish_time);
}

(int, int, int, int) ema_price_unsafe(int price_feed_id) method_id {
    (slice result, int success) = latest_price_feeds.udict_get?(256, price_feed_id);
    throw_unless(ERROR_PRICE_FEED_NOT_FOUND, success);
    slice price_feed = result~load_ref().begin_parse();
    slice price = price_feed~load_ref().begin_parse();
    slice ema_price = price_feed~load_ref().begin_parse();
    return parse_price(ema_price);
}

(int, int, int, int) ema_price_no_older_than(int time_period, int price_feed_id) method_id {
    (int price, int conf, int expo, int publish_time) = ema_price_unsafe(price_feed_id);
    int current_time = now();
    throw_if(ERROR_OUTDATED_PRICE, current_time - publish_time > time_period);
    return (price, conf, expo, publish_time);
}
