{"version":3,"file":"index.mjs","names":["address: Address","init?: { code: Cell; data: Cell }","lastCell: Cell | null","buffer","chunks: Uint8Array[]","dataSources: DataSource[]","keys: string[]"],"sources":["../../src/index.ts"],"sourcesContent":["import {\n  Address,\n  beginCell,\n  Cell,\n  Contract,\n  Dictionary,\n  Sender,\n  SendMode,\n  toNano,\n} from \"@ton/core\";\nimport { ContractProvider } from \"@ton/ton\";\n\nexport const PYTH_CONTRACT_ADDRESS_MAINNET =\n  \"EQBgtfuGIzWLiOzpZO48_psYvco4xRtkAbdbmTwy0_o95LtZ\";\nexport const PYTH_CONTRACT_ADDRESS_TESTNET =\n  \"EQB4ZnrI5qsP_IUJgVJNwEGKLzZWsQOFhiaqDbD7pTt_f9oU\";\n// This is defined in target_chains/ton/contracts/common/gas.fc\nexport const UPDATE_PRICE_FEEDS_BASE_GAS = 300000n;\nexport const UPDATE_PRICE_FEEDS_PER_UPDATE_GAS = 90000n;\n// Current settings in basechain are as follows: 1 unit of gas costs 400 nanotons\nexport const GAS_PRICE_FACTOR = 400n;\n\nexport interface DataSource {\n  emitterChain: number;\n  emitterAddress: string;\n}\n\nexport class PythContract implements Contract {\n  constructor(\n    readonly address: Address,\n    readonly init?: { code: Cell; data: Cell },\n  ) {}\n\n  static createFromAddress(address: Address) {\n    return new PythContract(address);\n  }\n\n  async getCurrentGuardianSetIndex(provider: ContractProvider) {\n    const result = await provider.get(\"get_current_guardian_set_index\", []);\n\n    return result.stack.readNumber();\n  }\n\n  async sendUpdateGuardianSet(\n    provider: ContractProvider,\n    via: Sender,\n    vm: Buffer,\n  ) {\n    const messageBody = beginCell()\n      .storeUint(1, 32) // OP_UPDATE_GUARDIAN_SET\n      .storeRef(createCellChain(vm))\n      .endCell();\n\n    await provider.internal(via, {\n      value: toNano(\"0.1\"),\n      sendMode: SendMode.PAY_GAS_SEPARATELY,\n      body: messageBody,\n    });\n  }\n\n  async sendUpdatePriceFeeds(\n    provider: ContractProvider,\n    via: Sender,\n    updateData: Buffer,\n    updateFee: bigint,\n  ) {\n    const messageBody = beginCell()\n      .storeUint(2, 32) // OP_UPDATE_PRICE_FEEDS\n      .storeRef(createCellChain(updateData))\n      .endCell();\n\n    await provider.internal(via, {\n      value: updateFee,\n      sendMode: SendMode.PAY_GAS_SEPARATELY,\n      body: messageBody,\n    });\n  }\n\n  async sendExecuteGovernanceAction(\n    provider: ContractProvider,\n    via: Sender,\n    governanceAction: Buffer,\n  ) {\n    const messageBody = beginCell()\n      .storeUint(3, 32) // OP_EXECUTE_GOVERNANCE_ACTION\n      .storeRef(createCellChain(governanceAction))\n      .endCell();\n\n    await provider.internal(via, {\n      value: toNano(\"0.1\"),\n      sendMode: SendMode.PAY_GAS_SEPARATELY,\n      body: messageBody,\n    });\n  }\n\n  async sendUpgradeContract(\n    provider: ContractProvider,\n    via: Sender,\n    newCode: Cell,\n  ) {\n    const messageBody = beginCell()\n      .storeUint(4, 32) // OP_UPGRADE_CONTRACT\n      .storeRef(newCode)\n      .endCell();\n\n    await provider.internal(via, {\n      value: toNano(\"0.1\"),\n      sendMode: SendMode.PAY_GAS_SEPARATELY,\n      body: messageBody,\n    });\n  }\n\n  async getPriceUnsafe(provider: ContractProvider, priceFeedId: string) {\n    const result = await provider.get(\"get_price_unsafe\", [\n      { type: \"int\", value: BigInt(priceFeedId) },\n    ]);\n\n    const price = result.stack.readNumber();\n    const conf = result.stack.readNumber();\n    const expo = result.stack.readNumber();\n    const publishTime = result.stack.readNumber();\n\n    return {\n      price,\n      conf,\n      expo,\n      publishTime,\n    };\n  }\n\n  async getPriceNoOlderThan(\n    provider: ContractProvider,\n    timePeriod: number,\n    priceFeedId: string,\n  ) {\n    const result = await provider.get(\"get_price_no_older_than\", [\n      { type: \"int\", value: BigInt(timePeriod) },\n      { type: \"int\", value: BigInt(priceFeedId) },\n    ]);\n\n    const price = result.stack.readNumber();\n    const conf = result.stack.readNumber();\n    const expo = result.stack.readNumber();\n    const publishTime = result.stack.readNumber();\n\n    return {\n      price,\n      conf,\n      expo,\n      publishTime,\n    };\n  }\n\n  async getEmaPriceUnsafe(provider: ContractProvider, priceFeedId: string) {\n    const result = await provider.get(\"get_ema_price_unsafe\", [\n      { type: \"int\", value: BigInt(priceFeedId) },\n    ]);\n\n    const price = result.stack.readNumber();\n    const conf = result.stack.readNumber();\n    const expo = result.stack.readNumber();\n    const publishTime = result.stack.readNumber();\n\n    return {\n      price,\n      conf,\n      expo,\n      publishTime,\n    };\n  }\n\n  async getEmaPriceNoOlderThan(\n    provider: ContractProvider,\n    timePeriod: number,\n    priceFeedId: string,\n  ) {\n    const result = await provider.get(\"get_ema_price_no_older_than\", [\n      { type: \"int\", value: BigInt(timePeriod) },\n      { type: \"int\", value: BigInt(priceFeedId) },\n    ]);\n\n    const price = result.stack.readNumber();\n    const conf = result.stack.readNumber();\n    const expo = result.stack.readNumber();\n    const publishTime = result.stack.readNumber();\n\n    return {\n      price,\n      conf,\n      expo,\n      publishTime,\n    };\n  }\n\n  async getUpdateFee(provider: ContractProvider, vm: Buffer) {\n    const result = await provider.get(\"get_update_fee\", [\n      { type: \"slice\", cell: createCellChain(vm) },\n    ]);\n\n    return result.stack.readNumber();\n  }\n\n  async getSingleUpdateFee(provider: ContractProvider) {\n    const result = await provider.get(\"get_single_update_fee\", []);\n\n    return result.stack.readNumber();\n  }\n\n  async getLastExecutedGovernanceSequence(provider: ContractProvider) {\n    const result = await provider.get(\n      \"get_last_executed_governance_sequence\",\n      [],\n    );\n\n    return result.stack.readNumber();\n  }\n\n  async getChainId(provider: ContractProvider) {\n    const result = await provider.get(\"get_chain_id\", []);\n\n    return result.stack.readNumber();\n  }\n\n  async getDataSources(provider: ContractProvider) {\n    const result = await provider.get(\"get_data_sources\", []);\n    return parseDataSources(result.stack.readCell());\n  }\n\n  async getGovernanceDataSource(provider: ContractProvider) {\n    const result = await provider.get(\"get_governance_data_source\", []);\n    return parseDataSource(result.stack.readCell());\n  }\n\n  async getGuardianSet(provider: ContractProvider, index: number) {\n    const result = await provider.get(\"get_guardian_set\", [\n      { type: \"int\", value: BigInt(index) },\n    ]);\n\n    const expirationTime = result.stack.readNumber();\n    const keys = parseGuardianSetKeys(result.stack.readCell());\n    const keyCount = result.stack.readNumber();\n\n    return {\n      expirationTime,\n      keys,\n      keyCount,\n    };\n  }\n}\n\nexport function createCellChain(buffer: Buffer): Cell {\n  const chunks = bufferToChunks(buffer, 127);\n  let lastCell: Cell | null = null;\n  // Iterate through chunks in reverse order\n  for (let i = chunks.length - 1; i >= 0; i--) {\n    const chunk = chunks[i];\n    const cellBuilder = beginCell();\n    const buffer = Buffer.from(chunk);\n    cellBuilder.storeBuffer(buffer);\n\n    if (lastCell) {\n      cellBuilder.storeRef(lastCell);\n    }\n\n    lastCell = cellBuilder.endCell();\n  }\n\n  // lastCell will be the root cell of our chain\n  if (!lastCell) {\n    throw new Error(\"Failed to create cell chain\");\n  }\n  return lastCell;\n}\n\nfunction bufferToChunks(buff: Buffer, chunkSizeBytes = 127): Uint8Array[] {\n  const chunks: Uint8Array[] = [];\n  const uint8Array = new Uint8Array(\n    buff.buffer,\n    buff.byteOffset,\n    buff.byteLength,\n  );\n\n  for (let offset = 0; offset < uint8Array.length; offset += chunkSizeBytes) {\n    const remainingBytes = Math.min(chunkSizeBytes, uint8Array.length - offset);\n    const chunk = uint8Array.subarray(offset, offset + remainingBytes);\n    chunks.push(chunk);\n  }\n\n  return chunks;\n}\n\nexport function parseDataSources(cell: Cell): DataSource[] {\n  const dataSources: DataSource[] = [];\n  const slice = cell.beginParse();\n  const dict = slice.loadDictDirect(\n    Dictionary.Keys.Uint(8),\n    Dictionary.Values.Cell(),\n  );\n  for (const [, value] of dict) {\n    const dataSource = parseDataSource(value);\n    if (dataSource) {\n      dataSources.push(dataSource);\n    }\n  }\n  return dataSources;\n}\n\nexport function parseDataSource(cell: Cell): DataSource | null {\n  const slice = cell.beginParse();\n  if (slice.remainingBits === 0) {\n    return null;\n  }\n  const emitterChain = slice.loadUint(16);\n  const emitterAddress = slice.loadUintBig(256).toString(16).padStart(64, \"0\");\n  return { emitterChain, emitterAddress };\n}\n\nexport function parseGuardianSetKeys(cell: Cell): string[] {\n  const keys: string[] = [];\n\n  function parseCell(c: Cell) {\n    let slice = c.beginParse();\n    while (slice.remainingRefs > 0 || slice.remainingBits >= 160) {\n      if (slice.remainingBits >= 160) {\n        const bitsToSkip = slice.remainingBits - 160;\n        slice = slice.skip(bitsToSkip);\n        const key = slice.loadBits(160);\n        keys.push(\"0x\" + key.toString());\n      }\n      if (slice.remainingRefs > 0) {\n        parseCell(slice.loadRef());\n      }\n    }\n  }\n\n  parseCell(cell);\n  return keys;\n}\n\nexport function calculateUpdatePriceFeedsFee(numUpdates: bigint) {\n  return (\n    (UPDATE_PRICE_FEEDS_BASE_GAS +\n      UPDATE_PRICE_FEEDS_PER_UPDATE_GAS * numUpdates) *\n    GAS_PRICE_FACTOR\n  );\n}\n"],"mappings":"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"}